I"<h3 id="background">Background</h3>
<p>I bought a book on data-driven dynamical system earlier this year right before the pandemic spread in the US (ref. 1). The book was writen by two Professors at University of Washington and was published quite recently. It talks about dynamical systems, but instead of focusing on the classical theories that we learnt in school, it focuses more on how data can help us identify and reduce the order of the systems. This post summarizes my understanding on the Dynamic Mode Decomposition (DMD) method after reading Session 7.2 of the book.</p>

<!--more-->
<h3 id="what-dmd-does">What DMD Does</h3>
<p>My understanding of DMD is that it tries to learn a linear dynamical system from data. Unlike training a deep learning neural network, however, DMD aims to do the “learning” fast and efficiently. The data fed into DMD are pairs of the state of the system separated by a small time interval $\Delta t$. By digesting these pairs of “before and after” data, DMD learns to predict how the system evolves in $\Delta t$. And if you know how the system changes in a small time scale $\Delta t$, you can predict its state at any time after an initial state is given.</p>

<h3 id="how-dmd-works">How DMD Works</h3>
<p>Let’s first talk about the data fed into the DMD algorithm. Denote $\vec{x}=[x_1, x_2, \cdots, x_n]^T$ as the state of a $n$-degrees-of-freedom dynamical system (i). We select a few, say $m$, snapshots of the system at different time and arrange these column vectors into a matrix $\textbf{X} = [\vec{x}(t_1), \vec{x}(t_2), \cdots, \vec{x}(t_m)]$. At each snapshot, we also get the state of the system after a time delay $\Delta t$, and arrange these states in a second matrix: $\textbf{X}’ = [\vec{x}(t_1+\Delta t), \vec{x}(t_2+\Delta t), \cdots, \vec{x}(t_m+\Delta t)]$.</p>

<h2 id="reference">Reference</h2>
<p>1.Brunton, S. L. &amp; Kutz, J. N. Data-Driven Science and Engineering: Machine Learning, Dynamical Systems, and Control. (Cambridge University Press, 2019). doi:10.1017/9781108380690.</p>
:ET