I"è6<div class="posts">
  
    <article class="post">

      <h1><a href="/DMD-Testing/">Testing the DMD Algorithm</a></h1>
      
      <div class="date">
         Written on December 29, 2020
      </div>

      
        <div>
          <h3 id="goal-and-overview">Goal and Overview</h3>
<p>In this exercise, I would like to create a toy problem to test the Dynamic Mode Decomposition (DMD) algorithm. In particular, I will first use a perfect 2D dynamical system to generate some noisy 3D data. I will then feed the noisy 3D data into DMD and see if I can recover the true 2D dynamics. The code below is written in MATLAB. I created the toy problem myself and have modified the original DMD codes in ref 1 to make it work for the toy problem.</p>


        </div>
        <input type="checkbox" class="read-more-state" id="/DMD-Testing/" />
        <div class="read-more-1">
          
<h3 id="data-creation">Data Creation</h3>
<p>In this session, I would like to create some 3D noisy data for a perfect 2D dynamical system.</p>

<pre>
  <code class="matlab">
    % create data
    t = 0:0.01:5;
    z1 = 2.0 * cos(2.0*pi*t);
    z2 = 1.0 * sin(2.0*pi*t);
    Z = [z1; z2];
    %plot(z1,z2); hold on;
    
    W = [sqrt(2.0)/2.0, -sqrt(2.0)/2.0; sqrt(2.0)/2.0, sqrt(2.0)/2.0];
    Y = W*Z;
    y1 = Y(1,:);
    y2 = Y(2,:);
    %plot(y1,y2); hold on;
    
    X = [Y; zeros(1,length(y1))];
    x1 = X(1,:) + normrnd(0.0,0.01, 1,length(y1));
    x2 = X(2,:) + normrnd(0.0,0.01, 1,length(y1));
    x3 = X(3,:) + normrnd(0.0,0.01, 1,length(y1));
    X = [x1;x2;x3];
    %figure; plot3(x1,x2,x3); hold on; axis equal; grid on;
    
    Xp = X(:,2:end);
    X = X(:,1:end-1);
  </code>
</pre>

<p>In the MATLAB code above, the</p>
<h3 id="step-1">Step 1</h3>
<pre>
  <code class="matlab">
    [U, Sigma, V] = svd(X,'econ');
    r = 2;
    Ur = U(:,1:r);
    Sigmar = Sigma(1:r,1:r);
    Vr = V(:,1:r);
  </code>
</pre>
<p>If you check the matrix $\textbf{U}$, you will find SVD correctly get the reduced state space for us.</p>

<h3 id="reference">Reference</h3>
<p>1.Brunton, S. L. &amp; Kutz, J. N. Data-Driven Science and Engineering: Machine Learning, Dynamical Systems, and Control. (Cambridge University Press, 2019). doi:10.1017/9781108380690.</p>

        </div>
        <label for="/DMD-Testing/" class="read-more-trigger"></label>
      

    </article>
  
    <article class="post">

      <h1><a href="/On-Dynamic-Mode-Decomposition/">On Dynamic Mode Decomposition</a></h1>
      
      <div class="date">
         Written on December 28, 2020
      </div>

      
        <div>
          <h3 id="background">Background</h3>
<p>I bought a book on data-driven dynamical systems (ref. 1) earlier this year right before the pandemic began to spread across the US. The book was writen by two professors from University of Washington and was published quite recently in 2019. The book talks about dynamical systems, but instead of focusing on the classical theories that we learnt in school, it focuses more on how data can help us identify and reduce the order of the systems. Session 7.2 of the book introduces a method named ‚ÄúDynamic Mode Decomposition‚Äù (DMD. I find it interesting because, essentially, the method enables us to use data to discover, characterize and predict how a dynamical system evolves. More importantly the characterization could be done in low order (i.e., with few degrees of freedom), which means if the data is from a high fidelity model, the method gives us a way to produce a reduced order model. This post summarizes my current high-level understanding of DMD after reading Session 7.2 of the book. Here I will not cite the papers already cited in the book, if interested, please look up the original research papers from the book.</p>


        </div>
        <input type="checkbox" class="read-more-state" id="/On-Dynamic-Mode-Decomposition/" />
        <div class="read-more-1">
          
<h3 id="what-dmd-does">What DMD Does</h3>
<p>DMD tries to learn a linear dynamical system from data and efficiently predict its behavior. Unlike training a deep learning neural network, however, DMD aims to do the ‚Äúlearning‚Äù efficiently. The data fed into the DMD algorithm are pairs of the state of a system separated by a small time interval $\Delta t$, for example, snapshots of the system at $t=10.0$s and $t=10.1$s. By digesting these pairs of ‚Äúbefore and after‚Äù states, DMD learns how the system evolves in the time period of $\Delta t$. And if you know how a linear system changes in small $\Delta t$, you can predict its state at any time after an initial state is given. Note that here no physical law is used, we rely totally on data, although the data itself can be from some high-fidelity simulator that uses physics.</p>

<h3 id="how-dmd-works">How DMD Works</h3>
<p>Let‚Äôs first talk about the data fed into the DMD algorithm. Let $\vec{x}=[x_1, x_2, \cdots, x_n]^T$ be the state of a $n$-degrees-of-freedom dynamical system. Note that it is a column vector. We select a few, say $m$, snapshots of this system at different time and arrange these column vectors into a matrix $\textbf{X} = [\vec{x}(t_1), \vec{x}(t_2), \cdots, \vec{x}(t_m)]$. For each snapshot, we also get the state of the system after a time delay $\Delta t$, and arrange these states in a second matrix: $\textbf{X}‚Äô = [\vec{x}(t_1+\Delta t), \vec{x}(t_2+\Delta t), \cdots, \vec{x}(t_m+\Delta t)]$. Now we would like to find a linear dynamical system such that:
\begin{equation}
\textbf{X}‚Äô = \textbf{A} \textbf{X}.
\end{equation}
Here $\textbf{A}$ is a linear transformation that maps a column in $\textbf{X}$ to a corresponding column in $\textbf{X}‚Äô$.</p>

<p>Naturally, one would think that if we could do an ‚Äúinverse‚Äù of the $n \times m$ matrix $\textbf{X}$ so that $\textbf{A} = \textbf{X}‚Äô \textbf{X}^{-1}$, then our mission is accomplished. This is indeed a valid thought and SVD (singular value decomposition) can help us perform the psudo inverse. The problem is that when we have a large $n$, computing the $n \times n$ matrix $\textbf{A}$ becomes expensive, not to mention that later we may need to further compute some properties of the system by manipulating $\textbf{A}$ so we can efficiently predict the long-time evolution of the system. DMD gave us a procedure to find $\textbf{A}$ efficiently.</p>

<p>Since the main issue is that we have a high-dimension system with a large $n$, let‚Äôs imagine we have a magic solution to reduce the order of the system via a orthonormal mapping $\textbf{U}$:
\begin{equation}
\vec{x} = \textbf{U} \vec{y}.
\end{equation}
Here $\textbf{U}$ is a $n \times r$ matrix, and $\vec{y}$, our magic new reduced order state with less degrees of freedom, is a $r \times 1$ vector with $r &lt; n$. Now the evolution of the system can be written as:
\begin{equation}
\textbf{U} \textbf{Y}‚Äô = \textbf{A} \left( \textbf{U} \textbf{Y} \right).
\end{equation}
So the reduced order states follows:
\begin{equation}
\textbf{Y}‚Äô = \left(\textbf{U}^* \textbf{A} \textbf{U} \right) \textbf{Y} = \textbf{A}_y \textbf{Y}.
\end{equation}
Here $\textbf{A}_y = \textbf{U}^* \textbf{A} \textbf{U}$ is a definition.</p>

<p>Assuming we know how to compute $\textbf{U}$ so we can convert our data from the $\vec{x}$ to the $\vec{y}$ space, then computing $\textbf{A}_y$ should be a ‚Äúcheaper‚Äù operation. Since $\textbf{A}_y$ and $\textbf{A}$ are related, by learning $\textbf{A}_y$ from data, we also obtain $\textbf{A}$.</p>

<p>One benefit of obtaining a linear dynamical system is that we could decouple it to efficiently predict its long-time evolution. Decoupling the $n \times n$ $\textbf{A}$ matrix is expensive, but the lower order $\textbf{A}_y$ could help. As a classical eigen problem exercise, the next step is to find a tranform $\textbf{W}$ between $\vec{y}$ and a new state $\vec{z}$ (also of order $r$):
\begin{equation}
\vec{y} = \textbf{W} \vec{z},
\end{equation}
so that the dynamics of $z_i$ are decoupled: 
\begin{equation}
\textbf{Z}‚Äô = \textbf{A}_z \textbf{Z}.
\end{equation}
Here $\textbf{A}_z = \text{diag}(\left[ \lambda_1, \lambda_2, \cdots, \lambda_r \right])$ is a $r \times r$ diagonal matrix. In the $z$ space, the decoupled variables evolve following:
\begin{equation}
z_i(t) = \exp \left(\lambda_i t \right) z_i(0).
\end{equation}
Here $i=1,2,\cdots,r$ and $\lambda_i$ are the complex-value eigen values.</p>

<p>To summarize, to reduce a high-dimensional data set to simple dynamics, one need to do two transforms, one from $\vec{x}$ to $\vec{y}$, followed by a second one from $\vec{y}$ to $\vec{z}$. Note that data matching is achieved when we compute $\textbf{A}_y$. Then we revert those transforms to predict how $\vec{x}$ will evolve.</p>

<h3 id="the-unexplained-magic-step">The Unexplained Magic Step</h3>
<p>I have left the ‚Äúmagic‚Äù step on transforming $\vec{x}$ to $\vec{y}$ unexplained above. This order reducing step can be achieved by using SVD decomposition of the $\textbf{X}$ matrix. It has been explained in the book (ref. 1) in earlier sessions.</p>

<h3 id="reference">Reference</h3>
<p>1.Brunton, S. L. &amp; Kutz, J. N. Data-Driven Science and Engineering: Machine Learning, Dynamical Systems, and Control. (Cambridge University Press, 2019). doi:10.1017/9781108380690.</p>

        </div>
        <label for="/On-Dynamic-Mode-Decomposition/" class="read-more-trigger"></label>
      

    </article>
  
    <article class="post">

      <h1><a href="/On-Transport-Maps/">On Transport Maps</a></h1>
      
      <div class="date">
         Written on December 25, 2020
      </div>

      
        <div>
          <h3 id="background">Background</h3>
<p>I‚Äôve been working with Professor Y. Marzouk and his postdoc P. Rubio on a Schlumberger project for the past year. One interesting technique I learnt from them is the so-called transport map. 
It is not about how to fit all MBTA routes onto an A4 paper, although everytime I saw the MBTA map on a bus I wonder if there is any math behind the design of that map. The transport map I learnt during the past year is about how to represent a complex probability distribution. Without sharing any Schlumberger related things, this post tries to document my understanding of the basics of transport maps (all have been published by Marzouk earlier, see ref.1 for example).</p>


        </div>
        <input type="checkbox" class="read-more-state" id="/On-Transport-Maps/" />
        <div class="read-more-1">
          
<h3 id="what-transport-maps-can-do-for-us">What Transport Maps Can Do for Us</h3>
<p>Imagine the following scenario. We know $x$ is a random variable that follows a standard Gaussian distribution. There is a complex function (maybe the function is only available numerically) $y=f(x)$ that transforms any given $x$ to a scalar $y$. What can we say about the distribution $P(y)$? Apparently one can sample a lot of $x$, pass them to the function $f$ to generate samples of $y$, then use statistics to describe the $y$ samples. This is great. But sometimes we may want to get an analytical expression for $P(y)$, or in some cases we are only given some samples of $y$ without any knowledge of $x$ and $f$ but we want to have a machinary to keep generating new samples of $y$ that minic the given samples. Transport maps can help.</p>

<p>Another scenario transport maps can help is when we are given an un-normalized distribution (maybe only numerically, i.e., if you give me a value $x$, I can tell you $P(x) \sim h(x)$ where $h$ doesn‚Äôt have an analytical expression but can be computed numerically following some procedure). Transport map can help us construct a normalized distribution and subsequently draw samples from it.</p>

<h3 id="how-transport-maps-work">How Transport Maps Work</h3>
<p>A transport map is a transform between a reference distribution and a targe distribution. We can use any simple distribution we like as our reference distribution and the target distribution is the one that we want to describe. The map is parametrized. The goal is to optimize those parameters so that after the transformation, the obtained target distribution matches any information we have about the target distribution. At the end of the day, finding a transport map becomes a loss minimization problem for parameter optimization.</p>

<p>Let‚Äôs say we are given some samples of $y$ and would like to (1) Obtain an analytic expression for $P(y)$ and (2) Generate more samples of $y$ ourselves. First thing we do is to pick a reference distribution we like. Say a standard normal distribution $P_x(x) \sim N(0,1)$. Then we define a parametrized map $y=f_\theta(x)$. Here $\theta$ are the parameters we will need to find/optimize later. Given any set of the parameters $\theta$, we can express $P_y(y)$ analytically as $P_y(y) = P_x({f_\theta}^{-1}(y)) | \nabla {f_\theta}^{-1} |$. Basically given any $y$, we say let‚Äôs transform it back to $x$ via $f_\theta^{-1}$ and see what‚Äôs the probability that $x$ appears ($P_x(x)$). We then adjust that with the Jacobian of the transform $f{_\theta}^{-1}$. With an parametrized and analytic $P_y(y)$, we now optimize the parameters so that $P_y(y)$ matches with the samples of $y$ given to us. This optimization can be done by minimizing the KL divergence between $P_y$ and the samples.</p>

<h3 id="references">References</h3>
<p>1.Marzouk, Y., Moselhy, T., Parno, M. &amp; Spantini, A. An introduction to sampling via measure transport. arXiv:1602.05023 [math, stat] 1‚Äì41 (2016) doi:10.1007/978-3-319-11259-6_23-1.</p>

        </div>
        <label for="/On-Transport-Maps/" class="read-more-trigger"></label>
      

    </article>
  
    <article class="post">

      <h1><a href="/Helllo-World/">Hello World</a></h1>
      
      <div class="date">
         Written on December 24, 2020
      </div>

      
        <p>Thanks for visiting this site. I created it using Jekyll.</p>

      

    </article>
  
</div>
:ET